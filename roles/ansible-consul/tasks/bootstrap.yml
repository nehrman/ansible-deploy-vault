---
### Block used to read or create the Bootstrap token used to configure ACL

- block: 

    - name: Read ACL master token from previously bootstrapped server
      command: "cat {{ consul_config_path }}/.bootstrap_token"
      register: bootstrap_config_read
      no_log: true
      run_once: true

    - name: Save acl_bootstrap_token from existing configuration
      set_fact:
        consul_acl_bootstrap_token: "{{ bootstrap_config_read.stdout }}"
      no_log: true 
  when:
    - acl_bootstrap_state.stat.exists | bool
    - (consul_acl_boostrap_token is not defined or consul_acl_boostrap_token | length == 0)
    - consul_node_role == 'server'
  
- block:

    - name: Bootstrap ACL on Consul
      uri:
        body_format: json
        method: PUT
        url: http://{{ consul_bind_address }}:8500/v1/acl/bootstrap
      register: consul_acl_bootstrap_token_keygen
      run_once: true
    
    - name: Store Bootstrap ACL Secret ID locally
      copy:
        content: "{{ consul_acl_bootstrap_token_keygen.json.SecretID }}"
        dest: "{{ consul_config_path }}/.bootstrap_token"
        owner: "{{ consul_user }}"
        group: "{{ consul_group }}"
        mode: 0640
    
    - name: Create bootstrapped state file
      file:
        dest: "{{ consul_acl_bootstrap_state }}"
        state: touch
    
    - name: Register Bootstrap ACL Token for future uses
      set_fact:
        consul_acl_bootstrap_token: "{{ consul_acl_bootstrap_token_keygen.json.SecretID }}"

  when: 
    - (consul_acl_bootstrap_token is not defined or consul_acl_bootstrap_token | length == 0)
    - not acl_bootstrap_state.stat.exists | bool
    - consul_node_role == 'server'


- name: Display Bootstrap ACL Token
  debug:
    msg: "{{ consul_acl_bootstrap_token }}"
  run_once: true
  when: 
    - consul_acl_bootstrap_token_display | bool
    - consul_node_role == 'server'
